#!/bin/sh

### Package: pbp-install-linux
### Version: v20200626.1500
### Author: Michael Gan "xmixahlx" michaelbgan@gmail.com
### License: GPLv3
### Script Dependencies: (none)

## VARS
RESDIR=`pwd`/resources
DEVDIR=`pwd`/upstream

## CROSSBUILD VARS
BUILDCONFIG="ARCH=arm64 CROSS_COMPILE=aarch64-none-linux-gnu-"
TCPU=cortex-a72.cortex-a53
TOPTS=+crypto+crc+simd
TARCH=armv8-a
BUILDOPTS="-O2 -pipe"
GCCARMPKG=gcc-arm-9.2-2019.12-x86_64-aarch64-none-linux-gnu
GCCARMDIR=$DEVDIR/$GCCARMPKG

## OVERRIDES
# Override no with yes for amd64 host build.
if [ -z $CROSSBUILD ]; then
 CROSSBUILD=no
fi
echo "\n*** CROSSBUILD selected is $CROSSBUILD.\n"

# Override 5.7 with a major release version number.
if [ -z $LINUXREL ]; then
 LINUXREL=5.7
fi
echo "\n*** LINUXREL selected is $LINUXREL.\n"

# Override no with release i.e. "5.7.3" or "5.8-rc1".
if [ -z $LINUXPATCH ]; then
 LINUXPATCH=no
fi
echo "\n*** LINUXPATCH selected is $LINUXPATCH.\n"

# Override with new base like "5.8".
if [ -z $LINUXBASE ]; then
 LINUXBASE=$LINUXREL
fi
echo "\n*** LINUXBASE selected is $LINUXBASE.\n"

# Override stable with testing or none.
if [ -z $HWACCELREL ]; then
 HWACCELREL=stable
fi
echo "\n*** HWACCELREL selected is $HWACCELREL.\n"

# Override debian with redhat or none to build your kernel your own way.
if [ -z $MAKEDISTRO ]; then
 MAKEDISTRO=debian
fi
echo "\n*** MAKEDISTRO selected is $MAKEDISTRO.\n"

# Override default with configfilename and place in upstream directory to use your own.
if [ -z $KERNELCONFIG ]; then
 KERNELCONFIG=default
fi
echo "\n*** KERNELCONFIG selected is $KERNELCONFIG.\n"

## CHECKS
# Check if provided KERNELCONFIG actually exists.
if [ $KERNELCONFIG != default ]; then
 if [ ! -f $DEVDIR/$KERNELCONFIG ]; then
  echo "\n*** KERNELCONFIG config file $KERNELCONFIG NOT found. Exiting.\n"
  exit
 else
  echo "\n*** KERNELCONFIG config file $KERNELCONFIG found.\n"
 fi
fi

## DEPS
# Provide INSTALLDEPS=debian to install dependencies.
if [ $INSTALLDEPS ]; then
 if [ $INSTALLDEPS = debian ]; then
  sudo apt-get -y install build-essential coreutils libc-bin wget tar xz-utils patch \
   libncurses-dev bison flex bc rsync libssl-dev
 fi
fi

## PREP
set -e
mkdir -p $DEVDIR
cd $DEVDIR

## CROSSBUILD ENV
if [ $CROSSBUILD = yes ]; then
 ## PATH
 export PATH=$GCCARMDIR/bin:$PATH

 ## GCC
 [ -f $GCCARMPKG.tar.xz ] || wget https://developer.arm.com/-/media/Files/downloads/gnu-a/9.2-2019.12/binrel/$GCCARMPKG.tar.xz
 [ -d $GCCARMDIR ] || tar xf $GCCARMPKG.tar.xz
fi

## GET
rm -Rf linux-$LINUXREL
[ -f linux-$LINUXREL.tar.xz ] || wget https://cdn.kernel.org/pub/linux/kernel/v5.x/linux-$LINUXREL.tar.xz
tar xf linux-$LINUXREL.tar.xz
if [ $LINUXBASE = $LINUXREL ]; then
 if [ $LINUXPATCH != no ]; then
  [ -f patch-${LINUXPATCH}.xz ] || wget https://cdn.kernel.org/pub/linux/kernel/v5.x/patch-${LINUXPATCH}.xz
 fi
 else
  [ -f linux-${LINUXREL}_${LINUXPATCH}.diff ] || wget "https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/rawdiff/?id=v${LINUXPATCH}&id2=v${LINUXREL}" -O linux-${LINUXREL}_${LINUXPATCH}.diff
fi

## PATCH
cd linux-$LINUXREL
if [ $LINUXBASE = $LINUXREL ]; then
 if [ $LINUXPATCH != no ]; then
   echo "\n*** Applying $LINUXPATCH LINUXPATCH.\n"
   xzcat $DEVDIR/patch-$LINUXPATCH.xz | patch -p1
 fi
 else
  echo "\n*** Applying $LINUXPATCH LINUXPATCH.\n"
  patch -p1 < $DEVDIR/linux-${LINUXREL}_${LINUXPATCH}.diff
fi
echo "\n*** Applying $LINUXBASE pinebookpro patch.\n"
patch -p1 < $RESDIR/linux/$LINUXBASE/current_diff_pinebookpro
if [ $HWACCELREL = none ]; then
 echo "\n*** Applying none HWACCEL diff.\n"
fi
if [ $HWACCELREL = stable ]; then
 echo "\n*** Applying stable HWACCEL diff.\n"
 patch -p1 < $RESDIR/linux/$LINUXBASE/current_diff_hwaccel_stable
fi
if [ $HWACCELREL = testing ]; then
 echo "\n*** Applying testing HWACCEL diff.\n"
 patch -p1 < $RESDIR/linux/$LINUXBASE/current_diff_hwaccel_testing
fi

## CONFIG
if [ $KERNELCONFIG = default ];then
 echo "\n*** Using default KERNELCONFIG.\n"a
 cp $RESDIR/linux/$LINUXBASE/current_config .config
else
 echo "\n*** Using $KERNELCONFIG KERNELCONFIG.\n"
 cp $DEVDIR/$KERNELCONFIG .config
fi

## CONFIGURE
if [ $CROSSBUILD = yes ]; then
 make -j `nproc` $BUILDCONFIG oldconfig
 make -j `nproc` $BUILDCONFIG menuconfig
fi
if [ $CROSSBUILD = no ]; then
 make -j `nproc` oldconfig
 make -j `nproc` menuconfig
fi

## BUILD
if [ $CROSSBUILD = yes ]; then
 if [ $MAKEDISTRO = debian ]; then
  KCFLAGS="$BUILDOPTS -march=$TARCH$TOPTS -mcpu=$TCPU -mtune=$TCPU" \
  KCPPFLAGS="$BUILDOPTS -march=$TARCH$TOPTS -mcpu=$TCPU -mtune=$TCPU" \
  make -j `nproc` $BUILDCONFIG INITRD=yes KBUILD_IMAGE=arch/arm64/boot/Image bindeb-pkg
 fi
 if [ $MAKEDISTRO = redhat ]; then
  KCFLAGS="$BUILDOPTS -march=$TARCH$TOPTS -mcpu=$TCPU -mtune=$TCPU" \
  KCPPFLAGS="$BUILDOPTS -march=$TARCH$TOPTS -mcpu=$TCPU -mtune=$TCPU" \
  make -j `nproc` $BUILDCONFIG INITRD=yes KBUILD_IMAGE=arch/arm64/boot/Image binrpm-pkg
 fi
 if [ $MAKEDISTRO = none ]; then
  KCFLAGS="$BUILDOPTS -march=$TARCH$TOPTS -mcpu=$TCPU -mtune=$TCPU" \
  KCPPFLAGS="$BUILDOPTS -march=$TARCH$TOPTS -mcpu=$TCPU -mtune=$TCPU" \
  make -j `nproc` $BUILDCONFIG
 fi
fi
if [ $CROSSBUILD = no ]; then
 if [ $MAKEDISTRO = debian ]; then
  make -j `nproc` INITRD=yes KBUILD_IMAGE=arch/arm64/boot/Image bindeb-pkg
 fi
 if [ $MAKEDISTRO = redhat ]; then
  make -j `nproc` INITRD=yes KBUILD_IMAGE=arch/arm64/boot/Image binrpm-pkg
 fi
 if [ $MAKEDISTRO = none ]; then
  make -j `nproc` INITRD=yes KBUILD_IMAGE=arch/arm64/boot/Image
 fi
fi

## EXIT
exit

## ENJOY

## POST SCRIPT
# install manually
